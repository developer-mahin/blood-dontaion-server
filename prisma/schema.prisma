// generator client {
//   provider = "prisma-client-js"
// }

// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
// }

// model User {
//   id           String         @id @default(uuid())
//   name         String
//   email        String         @unique
//   password     String
//   bloodType    BloodGroup
//   location     String
//   availability Boolean        @default(false)
//   createdAt    DateTime       @default(now())
//   updatedAt    DateTime       @updatedAt
//   userProfile  UserProfile?
//   donor        RequestModel[] @relation("donor")
//   requester    RequestModel[] @relation("requester")

//   @@map("users")
// }

// model UserProfile {
//   id               String   @id @default(uuid())
//   userId           String   @unique
//   bio              String
//   age              Int
//   lastDonationDate String
//   createdAt        DateTime @default(now())
//   updatedAt        DateTime @updatedAt

//   userProfile User @relation(fields: [userId], references: [id])

//   @@map("userProfiles")
// }

// model RequestModel {
//   id              String        @id @default(uuid())
//   donorId         String
//   requesterId     String
//   phoneNumber     String
//   dateOfDonation  String
//   hospitalName    String
//   hospitalAddress String
//   reason          String
//   requestStatus   RequestStatus @default(PENDING)
//   createdAt       DateTime      @default(now())
//   updatedAt       DateTime      @updatedAt

//   donor     User @relation("donor", fields: [donorId], references: [id])
//   requester User @relation("requester", fields: [requesterId], references: [id])

//   @@map("requestModel")
// }

// enum BloodGroup {
//   A_POSITIVE
//   A_NEGATIVE
//   B_POSITIVE
//   B_NEGATIVE
//   AB_POSITIVE
//   AB_NEGATIVE
//   O_POSITIVE
//   O_NEGATIVE
// }

// enum RequestStatus {
//   PENDING
//   APPROVED
//   REJECTED
// }

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String         @id @default(uuid())
  name         String
  email        String         @unique
  password     String
  bloodType    BloodGroup
  location     String
  availability Boolean        @default(false)
  role         UserRole       @default(DONOR)
  status       UserStatus     @default(ACTIVE)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  userProfile  UserProfile?
  donor        RequestModel[] @relation("donor")
  requester    RequestModel[] @relation("requester")

  @@map("users")
}

model UserProfile {
  id               String   @id @default(uuid())
  userId           String   @unique
  bio              String
  age              Int
  contactNumber    String?
  photo            String?
  lastDonationDate String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  userProfile User @relation(fields: [userId], references: [id])

  @@map("userProfiles")
}

model RequestModel {
  id              String        @id @default(uuid())
  donorId         String
  requesterId     String
  phoneNumber     String
  dateOfDonation  String
  hospitalName    String
  hospitalAddress String
  reason          String
  requestStatus   RequestStatus @default(PENDING)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  donor     User @relation("donor", fields: [donorId], references: [id])
  requester User @relation("requester", fields: [requesterId], references: [id])

  @@map("requestModel")
}

enum BloodGroup {
  A_POSITIVE
  A_NEGATIVE
  B_POSITIVE
  B_NEGATIVE
  AB_POSITIVE
  AB_NEGATIVE
  O_POSITIVE
  O_NEGATIVE
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
}

enum UserRole {
  DONOR
  ADMIN
}

enum UserStatus {
  ACTIVE
  DEACTIVE
  BLOCKED
}
